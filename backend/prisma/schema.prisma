// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DEVELOPER
}

model Environment{
id        String @id @default(cuid())
name      String
apiKey    String @unique
projectId String
project   Project @relation(fields: [projectId], references: [id])
flage     FeatureFlag[]
}

model Project {
  id           String @id @default(cuid())
  name         String
  description  String?
  websiteUrl   String
  environments Environment[]
  user         User[]
  joinKey       DeveloperJoinKey[]
  createdAt    DateTime @default(now())
}

model FeatureFlag {
  id            String  @id @default(uuid())
  key           String  @unique
  description   String?
  // value       Json?
  parentFlagId  String?
  parentFlag    FeatureFlag? @relation("SubFlags",fields: [parentFlagId],references: [id])
  subFlags      FeatureFlag[] @relation("SubFlags")
  value         Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  audits        AuditLog[]
  environmentId String
  environment Environment @relation(fields: [environmentId], references: [id])
}

model AuditLog {
  id          String @id @default(uuid())
  flagId      String
  flag FeatureFlag @relation(fields:[flagId],references: [id])
  userId String?
  user User? @relation(fields: [userId],references: [id])
  action String
  oldValue    Json?
  newValue    Json?
  createdAt   DateTime @default(now())
}

model Webhook {
  id        String @id @default(uuid())
  url       String
  env       String
  createdAt DateTime @default(now())
}

model User{
  id        String @id @default(cuid())
  email     String @unique
  password  String
  role      Role @default(DEVELOPER)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  auditlog  AuditLog[]
  joinKey   DeveloperJoinKey[]
  createdAt DateTime
}

model DeveloperJoinKey{
  id        String @id @default(cuid())
  key       String @unique
  projectId String
  project   Project @relation(fields: [projectId],references: [id])
  userId    String
  usedBy    User? @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())
  usedAt    DateTime?
  expiresAt DateTime?
}